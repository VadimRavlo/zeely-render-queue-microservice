generator client {
  provider      = "prisma-client-js"
  output        = "../../../../node_modules/.prisma/client"
  // output        = "../../../../generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id           String         @id @db.Uuid
  createdAt    DateTime       @default(now()) @db.Timestamptz
  updatedAt    DateTime       @default(now()) @updatedAt @db.Timestamptz
  url          String         @unique
  subtitles    Json?
  renderQueues RenderQueue[]
  media        ImagesVideos[]

  @@map("videos")
}

model Image {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime       @default(now()) @db.Timestamptz
  updatedAt DateTime       @default(now()) @updatedAt @db.Timestamptz
  url       String         @unique
  media     ImagesVideos[]

  @@map("images")
}

model ImagesVideos {
  image     Image    @relation(fields: [imageId], references: [id])
  imageId   String   @db.Uuid
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz

  @@id([imageId, videoId])
  @@map("imagesVideos")
}

enum RenderQueueStatus {
  DONE
  ERROR
  PROCESSING
  READY
  WAITING
}

enum RenderQueuePriority {
  HIGHEST
  HIGH
  MEDIUM
  LOW
}

model RenderQueue {
  id            String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime            @default(now()) @db.Timestamptz
  updatedAt     DateTime            @default(now()) @updatedAt @db.Timestamptz
  priority      RenderQueuePriority @default(LOW)
  setUpScriptId String?             @db.Uuid
  templateId    String              @db.Uuid
  status        RenderQueueStatus   @default(WAITING)
  errorText     String?
  doneAt        DateTime?           @db.Timestamptz
  video         Video               @relation(fields: [videoId], references: [id])
  videoId       String              @db.Uuid

  @@map("renderQueue")
}

enum ProviderProcessingStage {
  VIDEO_RENDER_START
  VIDEO_RENDER_END
}

enum ProviderEntityType {
  POSTGRESQL
  RENDER_SERVICE
}

enum ProviderOperationStatus {
  SUCCESS
  ERROR
}

model ProviderLogs {
  id         String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime                @default(now()) @db.Timestamptz
  stage      ProviderProcessingStage
  entityType ProviderEntityType
  status     ProviderOperationStatus
  message    String
  data       Json?

  @@map("providerLogs")
}
